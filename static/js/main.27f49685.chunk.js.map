{"version":3,"sources":["app/components/SealedDeckImporter.jsx","app/components/CardsListItem.jsx","app/components/CardsList.jsx","app/components/DeckStats.jsx","app/components/SealedDeckEditor.jsx","app/components/CardsListDropdown.jsx","app/components/DeckTester.jsx","app/containers/AppSealed.jsx","index.js"],"names":["CARDS_DEFINITION","require","SealedDeckImporter","_this","Object","classCallCheck","this","_super","call","importDeck","deck","mainboard","sideboard","cards","deckToImport","current","value","split","map","line","indexOfCardName","indexOf","cardCount","parseInt","slice","cardName","filter","card","isNaN","cardDefinition","find","name","newCard","assign","count","setManaDetails","setTypeDetails","console","log","props","onImportedDeck","manaWeight","manaCost","manaDetails","u","b","w","r","g","explicitC","x","c","h","manaSymbol","replace","includes","colors","length","type","splitValue","isSubType","types","subTypes","forEach","push","React","createRef","react_default","a","createElement","id","className","ref","onClick","Component","CardsListItem","getPower","class","power","toughness","loyalty","renderStandard","key","e","onCardClick","src","imageUrl","alt","width","height","set","renderImageOnly","view","CardsList","renderCards","sortType","sort","i","components_CardsListItem","DeckStats","renderManaCostsStats","cmcs","cmcsCreats","cmcItemCreat","item","cmc","cmcItem","options","chart","title","text","xAxis","categories","series","data","newData","_loop","newDataCreats","_loop2","plotOptions","column","stacking","dataLabels","enabled","highcharts_react_min_default","highcharts","Highcharts","containerProps","style","renderManaWeightStats","manaDetailsSum","newColors","y","plotBackgroundColor","plotBorderWidth","plotShadow","renderCardsTypeStats","creatures","artifacts","enchantments","sorceries","instants","pws","lands","LANDS_DEFINITION","SealedDeckEditor","onMainBoardCardClick","cardParam","deckCopy","cardInMainBoard","undefined","cardInSideBoard","onUpdateDeck","onSideBoardCardClick","addCard","cardId","landCard","getBoardSize","board","boardSize","_this2","components_CardsList","components_DeckStats","CardsListDropdown","reactstrap_module","toggle","bind","assertThisInitialized","state","dropdownOpen","setState","prevState","isOpen","caret","DeckTester","updateState","stateUpdated","library","hand","battlefield","graveyard","exile","fold","shouldSetState","foldedState","concat","drawCards","nCards","shuffleLibrary","j","temp","Math","floor","random","onHandCardClick","cardInHand","indexInDeck","onCardClickShowMenu","cardRenderId","zone","cardsMenu","onCloseCardsMenuClick","onMoveCardZoneMenuClick","currentZone","newZone","setFirst","moveCardZone","cardInZone","unshift","renderCardsMenu","life","nextProps","cardCopy","mulliganSize","restart","mulligan","components_CardsListDropdown","AppSealed","updateDeck","deckUpdated","components_SealedDeckImporter","components_SealedDeckEditor","components_DeckTester","ReactDOM","render","containers_AppSealed","document","getElementById"],"mappings":"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","file":"static/js/main.27f49685.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//const CARDS_DEFINITION = [\r\n//\t{ id: 1, count: 1, imageUrl: \"/db/cards/WAR/001.jpg\", name: \"Karn, the Great Creator\" },\r\n//\t{ id: 2, count: 1, imageUrl: \"/db/cards/WAR/002.jpg\", name: \"Ugin, the Ineffable\" },\r\n//\t{ id: 3, count: 1, imageUrl: \"/db/cards/WAR/003.jpg\", name: \"Ugin's Conjurant\" },\r\n//\t{ id: 4, count: 3, imageUrl: \"/db/cards/WAR/004.jpg\", name: \"Ajani's Pridemate\" }\r\n//  ];\r\n\r\n//var path = require(\"path\");\r\nvar CARDS_DEFINITION = require(\"../db/sets/snc.json\");\r\n\r\nclass SealedDeckImporter extends Component {\r\n  constructor() {\r\n    super();\r\n    this.deckToImport = React.createRef();\r\n  }\r\n\r\n  importDeck = () => {\r\n    let deck = { mainboard: [], sideboard: [] };\r\n\r\n    // OBTIENE LA LISTA DE CARTAS DEL TEXTAREA\r\n    let importPure = this.deckToImport.current.value;\r\n    let lines = importPure.split(\"\\n\");\r\n    let cards = lines.map(line => {\r\n      let indexOfCardName = line.indexOf(\" \");\r\n      let cardCount = parseInt(line.slice(0, indexOfCardName), 10);\r\n      let cardName = line.slice(indexOfCardName + 1);\r\n      return { cardCount: cardCount, cardName: cardName };\r\n    });\r\n    cards = cards.filter(card => !isNaN(card.cardCount));\r\n    // MATCH CADA CARTA DEL TEXTAREA CON LA CARTA DE LA DB Y LA AGREGA AL SIDEBOARD\r\n    deck.sideboard = cards.map(card => {\r\n      let cardDefinition = CARDS_DEFINITION.find(\r\n        cardDefinition => cardDefinition.name === card.cardName\r\n      );\r\n      // console.log(card.cardName);\r\n      let newCard = Object.assign({}, cardDefinition);\r\n      newCard.count = card.cardCount;\r\n      //newCard.manaWeight = this.getManaWeight(cardDefinition);\r\n      newCard = this.setManaDetails(newCard, cardDefinition);\r\n      newCard = this.setTypeDetails(newCard, cardDefinition);\r\n      console.log(newCard);\r\n      return newCard;\r\n    });\r\n    // CREAR EL DECK CORRESPONDIENTE\r\n    this.props.onImportedDeck(deck);\r\n  };\r\n\r\n  /** The manaWeight defines de position in the cards list when orderer by color\r\n   * A=Black, B=Green, C=Red, D=White, E=Blue, M=Multicolor, V=Colorless, Z=Land\r\n   * followed by the total CMC number\r\n   */\r\n/*  getManaWeight = card => {\r\n    let manaWeight = 0;\r\n    let splitValue = card.manaCost\r\n      .replace(/{/g, \"\")\r\n      .replace(/}/g, \"\")\r\n      .split(\"\");\r\n    splitValue.map(manaSymbol => {\r\n      if (!isNaN(manaSymbol)) manaWeight += parseInt(manaSymbol, 10);\r\n      else manaWeight += 1;\r\n      return manaSymbol;\r\n    });\r\n\r\n    if (card.colors.length < 1) {\r\n      if (card.types.includes(\"Land\")) {\r\n        manaWeight = \"Z\";\r\n      }\r\n      else {\r\n        manaWeight = \"V\" + manaWeight;\r\n      }\r\n    } else if (card.colors.length > 1) {\r\n      manaWeight = \"M\" + manaWeight;\r\n    } else {\r\n      switch (card.colors[0]) {\r\n        case \"B\": {\r\n          manaWeight = \"A\" + manaWeight;\r\n          break;\r\n        }\r\n        case \"G\": {\r\n          manaWeight = \"B\" + manaWeight;\r\n          break;\r\n        }\r\n        case \"R\": {\r\n          manaWeight = \"C\" + manaWeight;\r\n          break;\r\n        }\r\n        case \"W\": {\r\n          manaWeight = \"D\" + manaWeight;\r\n          break;\r\n        }\r\n        case \"U\":\r\n        default: {\r\n          manaWeight = \"E\" + manaWeight;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return manaWeight;\r\n  };\r\n*/\r\n\r\n  setManaDetails = (card, cardDefinition) => {\r\n    let manaWeight = 0;\r\n    let manaCost = 0;\r\n    let manaDetails = {\r\n      u: 0,\r\n      b: 0,\r\n      w: 0,\r\n      r: 0,\r\n      g: 0,\r\n      explicitC: 0,\r\n      x: 0,\r\n      c: 0,\r\n      h: 0\r\n    };\r\n\r\n//    let splitValue = cardDefinition.manaCost\r\n//      .replace(/{/g, \"\")\r\n//      .replace(/}/g, \"\")\r\n//      .split(\"\");\r\n    let splitValue = cardDefinition.manaCost\r\n      .split(\"}{\");\r\n    splitValue.map(manaSymbol => {\r\n      manaSymbol = manaSymbol.replace(/{/g, \"\").replace(/}/g, \"\");\r\n      if (!isNaN(manaSymbol)) {\r\n        manaWeight += parseInt(manaSymbol, 10);\r\n        manaCost += parseInt(manaSymbol, 10);\r\n        manaDetails.c += parseInt(manaSymbol, 10);\r\n      } else if (manaSymbol !== \"\") {\r\n        manaWeight += 1;\r\n        manaCost += 1;\r\n        if (manaSymbol.includes(\"/\")) {\r\n          manaDetails.h += 1;\r\n        }\r\n        else {\r\n          switch (manaSymbol) {\r\n            case \"B\": {\r\n              manaDetails.b += 1;\r\n              break;\r\n            }\r\n            case \"G\": {\r\n              manaDetails.g += 1;\r\n              break;\r\n            }\r\n            case \"R\": {\r\n              manaDetails.r += 1;\r\n              break;\r\n            }\r\n            case \"W\": {\r\n              manaDetails.w += 1;\r\n              break;\r\n            }\r\n            case \"U\": {\r\n              manaDetails.u += 1;\r\n              break;\r\n            }\r\n            default: {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return manaSymbol;\r\n    });\r\n\r\n    // Determine manaWeight\r\n    if (cardDefinition.colors.length < 1) {\r\n      if (cardDefinition.type.split(\" \").includes(\"Land\")) {\r\n        manaWeight = \"Z\";\r\n      }\r\n      else {\r\n        manaWeight = \"V\" + manaWeight;\r\n      }\r\n    } else if (cardDefinition.colors.length > 1) {\r\n      manaWeight = \"M\" + manaWeight;\r\n    } else {\r\n      switch (cardDefinition.colors[0]) {\r\n        case \"B\": {\r\n          manaWeight = \"A\" + manaWeight;\r\n          break;\r\n        }\r\n        case \"G\": {\r\n          manaWeight = \"B\" + manaWeight;\r\n          break;\r\n        }\r\n        case \"R\": {\r\n          manaWeight = \"C\" + manaWeight;\r\n          break;\r\n        }\r\n        case \"W\": {\r\n          manaWeight = \"D\" + manaWeight;\r\n          break;\r\n        }\r\n        case \"U\":\r\n        default: {\r\n          manaWeight = \"E\" + manaWeight;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    card.manaWeight = manaWeight;\r\n    card.manaCost = manaCost;\r\n    card.manaDetails = manaDetails;\r\n\r\n    return card;\r\n  };\r\n\r\n  setTypeDetails = (card, cardDefinition) => {\r\n    let splitValue = cardDefinition.type.split(\" \");\r\n    let isSubType = false;\r\n    let types = [];\r\n    let subTypes = [];\r\n    splitValue.forEach(type => {\r\n      if (isSubType === true) {\r\n        subTypes.push(type);\r\n      } else if (type === \"—\") {\r\n        isSubType = true;\r\n      } else {\r\n        types.push(type);\r\n      }\r\n    });\r\n\r\n    card.types = types;\r\n    card.subTypes = subTypes;\r\n\r\n    return card;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"sealedDeckImporter\">\r\n        <div className=\"divLeft\">\r\n          <span>Expansion</span>\r\n          <select id=\"setToImport\">\r\n            <option value=\"thb\">Theros Beyond Death</option>\r\n            <option value=\"m20\">Core Set 2020</option>\r\n            <option value=\"war\">War of the Spark</option>\r\n            <option value=\"snc\">Streets of New Capenna</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"divRight\">\r\n          <textarea id=\"deckToImport\" ref={this.deckToImport} />\r\n          <button onClick={this.importDeck}>Search</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SealedDeckImporter;\r\n","import React, { Component } from \"react\";\r\n\r\nexport const VIEW_STANDARD = 0;\r\nexport const VIEW_IMAGEONLY = 1;\r\n\r\nclass CardsListItem extends Component {\r\n  getPower = card => {\r\n    if (typeof card !== \"undefined\" && typeof card.types !== \"undefined\") {\r\n      if (card.types[0] === \"Creature\") {\r\n        return (\r\n          <span class=\"cardStrenght\">\r\n            {card.power}/{card.toughness}\r\n          </span>\r\n        );\r\n      } else if (card.types[0] === \"Planeswalker\") {\r\n        return <span class=\"cardStrenght\">{card.loyalty}</span>;\r\n      }\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  renderStandard = (id, card) => {\r\n    // todo: DIBUJAR CANTIDAD DE COPIAS DE ESTA CARTA\r\n    return (\r\n      <li\r\n        id={id}\r\n        key={id}\r\n        class=\"cardResult border border-light\"\r\n        onClick={e => this.props.onCardClick(card, id, e)}\r\n      >\r\n        <img src={card.imageUrl} alt={card.name} width=\"55\" height=\"75\" />\r\n        <div class=\"cardHeader\">\r\n          <span className=\"cardName\">{card.name}</span>\r\n          <span className=\"cardCost\">{card.manaCost}</span>\r\n        </div>\r\n        <div className=\"cardFooter\">\r\n          <span className=\"cardExpansion\">{card.set}</span>\r\n          <span className=\"cardType\">{card.type}</span>\r\n          {this.getPower(card)}\r\n        </div>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  renderImageOnly = (id, card) => {\r\n    return (\r\n      <li\r\n        id={id}\r\n        key={id}\r\n        className=\"cardResult imageOnly border border-light\"\r\n        onClick={e => this.props.onCardClick(card, id, e)}\r\n      >\r\n        <div>\r\n          <img src={card.imageUrl} alt={card.name} width=\"110\" height=\"150\" />\r\n          <span className=\"cardCount\">{card.count}</span>\r\n        </div>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    let { card } = this.props;\r\n    let { view } = this.props;\r\n    let { id } = this.props;\r\n    switch (view) {\r\n      case VIEW_IMAGEONLY: {\r\n        return this.renderImageOnly(id, card);\r\n      }\r\n      default: {\r\n        return this.renderStandard(id, card);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default CardsListItem;\r\n","import React, { Component } from \"react\";\r\nimport CardsListItem from \"./CardsListItem\";\r\n\r\nclass CardsList extends Component {\r\n  renderCards = (cards, sortType, view, id) => {\r\n    let sortByNameFunction = (a, b) =>\r\n      a.name > b.name ? 1 : a.name < b.name ? -1 : 0;\r\n    let sortByColorFunction = (a, b) =>\r\n      a.manaWeight > b.manaWeight ? 1 : a.manaWeight < b.manaWeight ? -1 : 0;\r\n    switch (sortType) {\r\n      case 1: {\r\n        cards = cards.sort(sortByColorFunction);\r\n        break;\r\n      }\r\n      default: {\r\n        cards = cards.sort(sortByNameFunction);\r\n        break;\r\n      }\r\n    }\r\n    let cardList = cards.map((card, i) => (\r\n      <CardsListItem\r\n        card={card}\r\n        view={view}\r\n        id={id + \"_card_\" + i}\r\n        key={id + \"_card_\" + i}\r\n        onCardClick={this.props.onCardClick}\r\n      />\r\n    ));\r\n    return cardList;\r\n  };\r\n\r\n  render() {\r\n    let { cards } = this.props;\r\n    let { view } = this.props;\r\n    let { id } = this.props;\r\n\r\n    return (\r\n      <ul id={id + \"_cardsList\"} className=\"cardsList\">\r\n        {this.renderCards(cards, 1, view, id)}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardsList;\r\n","import React, { Component } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nclass DeckStats extends Component {\r\n  renderManaCostsStats = deck => {\r\n    let cmcs = [];\r\n    let cmcsCreats = [];\r\n    deck.mainboard.forEach(card => {\r\n//      console.log(card);\r\n      if (card.types.includes(\"Creature\")) {\r\n        let cmcItemCreat = cmcsCreats.find(item => item.cmc === card.manaCost);\r\n        if (cmcItemCreat) {\r\n          cmcItemCreat.count = cmcItemCreat.count + card.count;\r\n        } else {\r\n          cmcItemCreat = { cmc: card.manaCost, count: card.count };\r\n          cmcsCreats.push(cmcItemCreat);\r\n        }\r\n      }\r\n      else {\r\n        let cmcItem = cmcs.find(item => item.cmc === card.manaCost);\r\n        if (cmcItem) {\r\n          cmcItem.count = cmcItem.count + card.count;\r\n        } else {\r\n          cmcItem = { cmc: card.manaCost, count: card.count };\r\n          cmcs.push(cmcItem);\r\n        }\r\n      }\r\n    });\r\n    /*    let cardList = [];\r\n    for (let i = 0; i < 10; ++i) {\r\n      let cmcItem = cmcs.find(item => item.cmc === i);\r\n      if (cmcItem)\r\n        cardList.push(\r\n          <span>\r\n            {i}: {cmcItem.count} -\r\n          </span>\r\n        );\r\n      else cardList.push(<span key={\"cmc_\" + i}>- {i}: 0 - </span>);\r\n    }\r\n    return cardList;\r\n    */\r\n    let options = {\r\n      chart: { type: \"column\" },\r\n      title: { text: \"\" },\r\n      xAxis: { categories: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] },\r\n      series: [{ data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }]\r\n    };\r\n    let newData = [];\r\n    for (let i = 0; i < 10; ++i) {\r\n      let cmcItem = cmcs.find(item => item.cmc === i);\r\n      if (cmcItem) newData.push(cmcItem.count);\r\n      else newData.push(0);\r\n    }\r\n    let newDataCreats = [];\r\n    for (let i = 0; i < 10; ++i) {\r\n      let cmcItemCreat = cmcsCreats.find(item => item.cmc === i);\r\n      if (cmcItemCreat) newDataCreats.push(cmcItemCreat.count);\r\n      else newDataCreats.push(0);\r\n    }\r\n    options.series = [{ name: \"NonCreatures\", data: newData }, { name: \"Creatures\", data: newDataCreats }];\r\n    options.plotOptions = {\r\n      column: {\r\n        stacking: 'normal',\r\n        dataLabels: {\r\n          enabled: true\r\n        }\r\n      }\r\n    };\r\n    return (\r\n      <div>\r\n        <HighchartsReact\r\n          highcharts={Highcharts}\r\n          options={options}\r\n          containerProps={{ style: { width: \"300px\", height: \"150px\" } }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderManaWeightStats = deck => {\r\n    let manaDetailsSum = {\r\n      u: 0,\r\n      b: 0,\r\n      w: 0,\r\n      r: 0,\r\n      g: 0,\r\n      explicitC: 0,\r\n      h: 0  // not yet supported\r\n    };\r\n    deck.mainboard.forEach(card => {\r\n//      console.log(card);\r\n      if( !card.types.includes(\"Land\") ) {\r\n        manaDetailsSum.u += card.manaDetails.u;\r\n        manaDetailsSum.b += card.manaDetails.b;\r\n        manaDetailsSum.w += card.manaDetails.w;\r\n        manaDetailsSum.r += card.manaDetails.r;\r\n        manaDetailsSum.g += card.manaDetails.g;\r\n        manaDetailsSum.explicitC += card.manaDetails.explicitC;\r\n      }\r\n    });\r\n    let newData = [];\r\n    let newColors = [];\r\n    if (manaDetailsSum.u > 0 ) {\r\n      newData.push( { name: \"Blue\", y: manaDetailsSum.u } );\r\n      newColors.push( \"#0000FF\" );\r\n    }\r\n    if (manaDetailsSum.b > 0 ) {\r\n      newData.push( { name: \"Black\", y: manaDetailsSum.b } );\r\n      newColors.push( \"#000000\" );\r\n    }\r\n    if (manaDetailsSum.g > 0 ) {\r\n      newData.push( { name: \"Green\", y: manaDetailsSum.g } );\r\n      newColors.push( \"#00FF00\" );\r\n    }\r\n    if (manaDetailsSum.r > 0 ) {\r\n      newData.push( { name: \"Red\", y: manaDetailsSum.r } );\r\n      newColors.push( \"#FF0000\" );\r\n    }\r\n    if (manaDetailsSum.w > 0 ) {\r\n      newData.push( { name: \"White\", y: manaDetailsSum.w } );\r\n      newColors.push( \"#FFFFFF\" );\r\n    }\r\n\r\n    let options = {\r\n      chart: {\r\n        plotBackgroundColor: null,\r\n        plotBorderWidth: null,\r\n        plotShadow: false,\r\n        type: 'pie'\r\n      },\r\n      title: { text: \"\" },\r\n      series: [{ data: newData }],\r\n      colors: newColors\r\n    };\r\n    return (\r\n      <div>\r\n        <HighchartsReact\r\n          highcharts={Highcharts}\r\n          options={options}\r\n          containerProps={{ style: { width: \"300px\", height: \"150px\" } }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderCardsTypeStats = deck => {\r\n    //console.log(deck);\r\n    let mainboard = deck.mainboard;\r\n    let creatures = 0;\r\n    let artifacts = 0;\r\n    let enchantments = 0;\r\n    let sorceries = 0;\r\n    let instants = 0;\r\n    let pws = 0;\r\n    let lands = 0;\r\n    mainboard.forEach(card => {\r\n      console.log(card);\r\n      for (let i = 0; i < card.types.length; ++i) {\r\n        switch (card.types[i]) {\r\n          case \"Creature\":\r\n            creatures += card.count;\r\n            break;\r\n          case \"Artifact\":\r\n            artifacts += card.count;\r\n            break;\r\n          case \"Enchantment\":\r\n            enchantments += card.count;\r\n            break;\r\n          case \"Sorcery\":\r\n            sorceries += card.count;\r\n            break;\r\n          case \"Instant\":\r\n            instants += card.count;\r\n            break;\r\n          case \"Planeswalker\":\r\n            pws += card.count;\r\n            break;\r\n          case \"Land\":\r\n            lands += card.count;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    return (\r\n      <div id=\"divDeckStats\">\r\n        <div>Creatures: {creatures}</div>\r\n        <div>Artifacts: {artifacts}</div>\r\n        <div>Enchantments: {enchantments}</div>\r\n        <div>Sorceries: {sorceries}</div>\r\n        <div>Instants: {instants}</div>\r\n        <div>Planeswalkers: {pws}</div>\r\n        <div>Lands: {lands}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    let { deck } = this.props;\r\n\r\n    return (\r\n      <div id=\"deckStats\">\r\n        {this.renderManaCostsStats(deck)}\r\n        {this.renderManaWeightStats(deck)}\r\n        {this.renderCardsTypeStats(deck)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeckStats;\r\n","import React, { Component } from \"react\";\r\nimport CardsList from \"./CardsList\";\r\nimport DeckStats from \"./DeckStats\";\r\nimport { VIEW_STANDARD, VIEW_IMAGEONLY } from \"../components/CardsListItem\";\r\n\r\nconst LANDS_DEFINITION = [\r\n  { id: 250, types: [\"Land\"], imageUrl: \"/db/cards/Lands/plains.jpg\", name: \"Plains\" },\r\n  { id: 253, types: [\"Land\"], imageUrl: \"/db/cards/Lands/island.jpg\", name: \"Island\" },\r\n  { id: 256, types: [\"Land\"], imageUrl: \"/db/cards/Lands/swamp.jpg\", name: \"Swamp\" },\r\n  { id: 259, types: [\"Land\"], imageUrl: \"/db/cards/Lands/mountain.jpg\", name: \"Mountain\" },\r\n  { id: 262, types: [\"Land\"], imageUrl: \"/db/cards/Lands/forest.jpg\", name: \"Forest\" }\r\n];\r\n\r\nclass SealedDeckEditor extends Component {\r\n  onMainBoardCardClick = cardParam => {\r\n    //\t\tconsole.log( \"onMainBoardCardClick\" );\r\n\r\n    let { deck } = this.props;\r\n    let deckCopy = Object.assign({}, deck);\r\n\r\n    // SI ES LA UNICA CARTA, ELIMINARLA\r\n    deckCopy.mainboard = deck.mainboard.slice();\r\n    let cardInMainBoard = deckCopy.mainboard.find(\r\n      card => card.id === cardParam.id\r\n    );\r\n    if (cardInMainBoard.count > 1) {\r\n      cardInMainBoard.count--;\r\n    } else {\r\n      deckCopy.mainboard = deckCopy.mainboard.filter(\r\n        card => card.id !== cardParam.id\r\n      );\r\n    }\r\n\r\n    // SI NO ES TIERRA BASICA, PASAR LA CARTA AL SIDEBOARD\r\n    let landCard = LANDS_DEFINITION.find(card => card.id === cardParam.id);\r\n    if (landCard === undefined) {\r\n      deckCopy.sideboard = deck.sideboard.slice();\r\n      let cardInSideBoard = deckCopy.sideboard.find(\r\n        card => card.id === cardParam.id\r\n      );\r\n      if (cardInSideBoard !== undefined) {\r\n        cardInSideBoard.count++;\r\n      } else {\r\n        let newCard = Object.assign({}, cardInMainBoard);\r\n        newCard.count = 1;\r\n        deckCopy.sideboard.push(newCard);\r\n      }\r\n    }\r\n\r\n    // ACTUALIZAR EL DECK\r\n    this.props.onUpdateDeck(deckCopy);\r\n  };\r\n\r\n  onSideBoardCardClick = cardParam => {\r\n    //\t\tconsole.log( cardId );\r\n\r\n    let { deck } = this.props;\r\n    let deckCopy = Object.assign({}, deck);\r\n\r\n    // SI ES LA UNICA CARTA, ELIMINARLA\r\n    deckCopy.sideboard = deck.sideboard.slice();\r\n    let cardInSideBoard = deckCopy.sideboard.find(\r\n      card => card.id === cardParam.id\r\n    );\r\n    //\t\tconsole.log( \"cardInSideBoard \"+ cardInSideBoard );\r\n    if (cardInSideBoard.count > 1) {\r\n      cardInSideBoard.count--;\r\n    } else {\r\n      deckCopy.sideboard = deckCopy.sideboard.filter(\r\n        card => card.id !== cardParam.id\r\n      );\r\n    }\r\n    //\t\tconsole.log( \"deckCopy \"+ JSON.stringify(deckCopy) );\r\n\r\n    // SI NO ES TIERRA BASICA, PASAR LA CARTA AL MAINBOARD\r\n    deckCopy.mainboard = deck.mainboard.slice();\r\n    let cardInMainBoard = deckCopy.mainboard.find(\r\n      card => card.id === cardParam.id\r\n    );\r\n    //\t\tconsole.log( \"cardInMainBoard \"+ cardInMainBoard );\r\n    if (cardInMainBoard !== undefined) {\r\n      cardInMainBoard.count++;\r\n    } else {\r\n      let newCard = Object.assign({}, cardInSideBoard);\r\n      newCard.count = 1;\r\n      deckCopy.mainboard.push(newCard);\r\n    }\r\n\r\n    //\t\tconsole.log( \"deckCopy \"+ JSON.stringify(deckCopy) );\r\n    // ACTUALIZAR EL DECK\r\n    this.props.onUpdateDeck(deckCopy);\r\n  };\r\n\r\n  addCard = cardId => {\r\n    let { deck } = this.props;\r\n    let deckCopy = Object.assign({}, deck);\r\n\r\n    // AGREGAR LA CARTA AL MAINBOARD\r\n    deckCopy.mainboard = deck.mainboard.slice();\r\n    let cardInMainBoard = deckCopy.mainboard.find(card => card.id === cardId);\r\n    //\t\tconsole.log( \"cardInMainBoard \"+ cardInMainBoard );\r\n    if (cardInMainBoard !== undefined) {\r\n      cardInMainBoard.count++;\r\n    } else {\r\n      let landCard = LANDS_DEFINITION.find(card => card.id === cardId);\r\n      let newCard = Object.assign({}, landCard);\r\n      newCard.count = 1;\r\n      deckCopy.mainboard.push(newCard);\r\n    }\r\n\r\n    //\t\tconsole.log( \"deckCopy \"+ JSON.stringify(deckCopy) );\r\n    // ACTUALIZAR EL DECK\r\n    this.props.onUpdateDeck(deckCopy);\r\n  };\r\n\r\n  getBoardSize = board => {\r\n    let boardSize = 0;\r\n    board.map(card => (boardSize += card.count));\r\n    return boardSize;\r\n  };\r\n\r\n  render() {\r\n    let { deck } = this.props;\r\n    return (\r\n      <div id=\"sealedDeckEditor\">\r\n        <p>SideBoard ({this.getBoardSize(deck.sideboard)})</p>\r\n        <CardsList\r\n          id=\"sb\"\r\n          cards={deck.sideboard}\r\n          onCardClick={this.onSideBoardCardClick}\r\n          view={VIEW_IMAGEONLY}\r\n        />\r\n        <ul id=\"basicLandsList\" className=\"cardsList\">\r\n          <li>Lands:</li>\r\n          <li className=\"cardResult imageOnly border border-light\">\r\n            <img\r\n              alt=\"Plains\"\r\n              src=\"/db/cards/Lands/plains.jpg\"\r\n              onClick={e => this.addCard(250, e)}\r\n            />\r\n          </li>\r\n          <li className=\"cardResult imageOnly border border-light\">\r\n            <img\r\n              alt=\"Island\"\r\n              src=\"/db/cards/Lands/island.jpg\"\r\n              onClick={e => this.addCard(253, e)}\r\n            />\r\n          </li>\r\n          <li className=\"cardResult imageOnly border border-light\">\r\n            <img\r\n              alt=\"Swamp\"\r\n              src=\"/db/cards/Lands/swamp.jpg\"\r\n              onClick={e => this.addCard(256, e)}\r\n            />\r\n          </li>\r\n          <li className=\"cardResult imageOnly border border-light\">\r\n            <img\r\n              alt=\"Mountain\"\r\n              src=\"/db/cards/Lands/mountain.jpg\"\r\n              onClick={e => this.addCard(259, e)}\r\n            />\r\n          </li>\r\n          <li className=\"cardResult imageOnly border border-light\">\r\n            <img\r\n              alt=\"Forest\"\r\n              src=\"/db/cards/Lands/forest.jpg\"\r\n              onClick={e => this.addCard(262, e)}\r\n            />\r\n          </li>\r\n        </ul>\r\n        <p>MainBoard ({this.getBoardSize(deck.mainboard)})</p>\r\n        <DeckStats deck={deck} />\r\n        <CardsList\r\n          id=\"mb\"\r\n          cards={deck.mainboard}\r\n          onCardClick={this.onMainBoardCardClick}\r\n          view={VIEW_IMAGEONLY}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SealedDeckEditor;\r\n","import React, { Component } from \"react\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\r\n//import 'bootstrap/dist/css/bootstrap.css'\r\n\r\nclass CardsListDropdown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      dropdownOpen: false\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    console.log(\"toggle click > \"+ this.state.dropdownOpen);\r\n    this.setState(prevState => ({\r\n      dropdownOpen: !prevState.dropdownOpen\r\n    }));\r\n  }\r\n\r\n  renderCards = (cards) => {\r\n    let cardList = cards.map((card, i) => (\r\n      <DropdownItem\r\n        onClick={e => this.props.onCardClick(card, this.props.id + \"_card_\" + i, e)}\r\n      >\r\n        { card.name }\r\n      </DropdownItem>\r\n    ));\r\n    return cardList;\r\n  };\r\n\r\n  render() {\r\n    let { cards } = this.props;\r\n    let { id } = this.props;\r\n\r\n    return (\r\n      <Dropdown id={id + \"_cardsList\"} isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n        <DropdownToggle caret>\r\n          Library\r\n        </DropdownToggle>\r\n        <DropdownMenu>\r\n          { this.renderCards(cards) }\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardsListDropdown;\r\n","import React, { Component } from \"react\";\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport CardsList from \"./CardsList\";\r\nimport CardsListDropdown from \"./CardsListDropdown\";\r\nimport { VIEW_STANDARD, VIEW_IMAGEONLY } from \"../components/CardsListItem\";\r\n\r\nclass DeckTester extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let { deck } = props;\r\n    let deckCopy = Object.assign({}, deck);\r\n    deckCopy.mainboard = deck.mainboard.slice();\r\n    deckCopy.sideboard = deck.sideboard.slice();\r\n    this.state = {\r\n      deck: deckCopy,\r\n      library: [],\r\n      hand: [],\r\n      battlefield: [],\r\n      graveyard: [],\r\n      exile: [],\r\n      life: 20,\r\n      cardsMenu: { isOpen: false, card: null, zone: -1 }\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    let { deck } = nextProps;\r\n    let deckCopy = Object.assign({}, deck);\r\n    deckCopy.mainboard = deck.mainboard.slice();\r\n    deckCopy.sideboard = deck.sideboard.slice();\r\n    // PARA CADA CARTA EN mainboard CREA UNA COPIA POR count PARA library\r\n    var cards = [];\r\n    deckCopy.mainboard.forEach(card => {\r\n      for (let i = 0; i < card.count; ++i) {\r\n        var cardCopy = Object.assign({}, card);\r\n        cardCopy.count = 1;\r\n        cardCopy.indexInDeck = cards.length;\r\n        cards.push(cardCopy);\r\n      }\r\n    });\r\n    this.setState({ deck: deckCopy, library: cards });\r\n  }\r\n\r\n  updateState = state => {\r\n    let stateUpdated = Object.assign({}, state);\r\n    stateUpdated.library = state.library.slice();\r\n    stateUpdated.hand = state.hand.slice();\r\n    stateUpdated.battlefield = state.battlefield.slice();\r\n    stateUpdated.graveyard = state.graveyard.slice();\r\n    stateUpdated.exile = state.exile.slice();\r\n    //\t\tconsole.log( \"stateUpdated \"+ JSON.stringify(stateUpdated) );\r\n    this.setState(stateUpdated);\r\n  };\r\n\r\n  fold = (state, shouldSetState) => {\r\n    let foldedState = Object.assign({}, state);\r\n    foldedState.library = state.library\r\n      .slice()\r\n      .concat(state.hand.slice())\r\n      .concat(state.battlefield.slice())\r\n      .concat(state.graveyard.slice())\r\n      .concat(state.exile.slice());\r\n    foldedState.hand = [];\r\n    foldedState.battlefield = [];\r\n    foldedState.graveyard = [];\r\n    foldedState.exile = [];\r\n    if (shouldSetState) this.setState(foldedState);\r\n    return foldedState;\r\n  };\r\n\r\n  restart() {\r\n    // METE TODAS LAS CARTAS EN library\r\n    let stateUpdated = this.fold(this.state);\r\n    // MEZCLA Y ROBA 7 CARTAS\r\n    stateUpdated = this.shuffleLibrary(stateUpdated);\r\n    stateUpdated = this.drawCards(stateUpdated, false, 7);\r\n    this.setState(stateUpdated);\r\n  }\r\n\r\n  mulligan() {\r\n    var mulliganSize =\r\n      this.state.hand.length > 0 ? this.state.hand.length - 1 : 0;\r\n    // METE TODAS LAS CARTAS EN library\r\n    let stateUpdated = this.fold(this.state);\r\n    // MEZCLA Y ROBA mulliganSize CARTAS\r\n    stateUpdated = this.shuffleLibrary(stateUpdated);\r\n    stateUpdated = this.drawCards(stateUpdated, false, mulliganSize);\r\n    this.setState(stateUpdated);\r\n  }\r\n\r\n  drawCards = (state, shouldSetState, nCards) => {\r\n    let stateUpdated = Object.assign({}, state);\r\n    // TOMA LAS n CARTAS DEL FINAL DEL ARRAY library Y LAS PONE EN EL ARRAY hand\r\n    stateUpdated.library = state.library.slice(0, -nCards);\r\n    stateUpdated.hand = state.hand.slice();\r\n    stateUpdated.hand = stateUpdated.hand.concat(state.library.slice(-nCards));\r\n    if (shouldSetState) this.setState(stateUpdated);\r\n    return stateUpdated;\r\n  };\r\n\r\n  shuffleLibrary = (state, shouldSetState) => {\r\n    let stateUpdated = Object.assign({}, state);\r\n    stateUpdated.library = state.library.slice();\r\n    var i, j, temp;\r\n    for (i = stateUpdated.library.length - 1; i > 0; i--) {\r\n      j = Math.floor(Math.random() * (i + 1));\r\n      temp = stateUpdated.library[i];\r\n      stateUpdated.library[i] = stateUpdated.library[j];\r\n      stateUpdated.library[j] = temp;\r\n    }\r\n    if (shouldSetState) this.setState(stateUpdated);\r\n    return stateUpdated;\r\n  };\r\n\r\n  onHandCardClick = cardParam => {\r\n    let stateUpdated = Object.assign({}, this.state);\r\n\r\n    // SI ES LA UNICA CARTA, ELIMINARLA\r\n    stateUpdated.hand = this.state.hand.slice();\r\n    let cardInHand = stateUpdated.hand.find(\r\n      card => card.indexInDeck === cardParam.indexInDeck\r\n    );\r\n    stateUpdated.hand = stateUpdated.hand.filter(\r\n      card => card.indexInDeck !== cardParam.indexInDeck\r\n    );\r\n\r\n    // PASAR LA CARTA AL BATTLEFIELD\r\n    stateUpdated.battlefield = this.state.battlefield.slice();\r\n    let newCard = Object.assign({}, cardInHand);\r\n    stateUpdated.battlefield.push(newCard);\r\n\r\n    // ACTUALIZAR EL DECK\r\n    this.setState(stateUpdated);\r\n  };\r\n\r\n  /** zone => 0: hand, 1: battlefield, 2: graveyard, 3: exile, 4: deck */\r\n  onCardClickShowMenu = (cardParam, cardRenderId) => {\r\n    let stateUpdated = Object.assign({}, this.state);\r\n    let zone = -1;\r\n    let zoneId = cardRenderId.split(\"_\")[0];\r\n    switch(zoneId)\r\n    {\r\n      case \"hand\": zone = 0; break;\r\n      case \"bf\": zone = 1; break;\r\n      case \"graveyard\": zone = 2; break;\r\n      case \"exile\": zone = 3; break;\r\n      case \"library\": zone = 4; break;\r\n      default: zone = -1; break;\r\n    }\r\n    stateUpdated.cardsMenu = { isOpen: true, card: cardParam, zone: zone };\r\n    this.setState(stateUpdated);\r\n  };\r\n\r\n  onCloseCardsMenuClick = () => {\r\n    let stateUpdated = Object.assign({}, this.state);\r\n    stateUpdated.cardsMenu = { isOpen: false, card: null, zone: -1 };\r\n    this.setState(stateUpdated);\r\n  };\r\n\r\n  onMoveCardZoneMenuClick = (cardParam, currentZone, newZone, setFirst) => {\r\n    let stateUpdated = Object.assign({}, this.state);\r\n    stateUpdated = this.moveCardZone(stateUpdated, false, cardParam, currentZone, newZone, setFirst);\r\n    stateUpdated.cardsMenu = { isOpen: false, card: null, zone: -1 };\r\n    this.setState(stateUpdated);\r\n  }\r\n\r\n  moveCardZone = (state, shouldSetState, cardParam, currentZone, newZone, setFirst) => {\r\n    let stateUpdated = Object.assign({}, state);\r\n\r\n    // SI ES LA UNICA CARTA, ELIMINARLA\r\n    let cardInZone = cardParam;\r\n    switch(currentZone) {\r\n      case 0: {\r\n        stateUpdated.hand = state.hand.slice();\r\n        cardInZone = stateUpdated.hand.find(\r\n          card => card.indexInDeck === cardParam.indexInDeck\r\n        );\r\n        stateUpdated.hand = stateUpdated.hand.filter(\r\n          card => card.indexInDeck !== cardParam.indexInDeck\r\n        );\r\n        \r\n        break;\r\n      }\r\n      case 1: {\r\n        stateUpdated.battlefield = state.battlefield.slice();\r\n        cardInZone = stateUpdated.battlefield.find(\r\n          card => card.indexInDeck === cardParam.indexInDeck\r\n        );\r\n        stateUpdated.battlefield = stateUpdated.battlefield.filter(\r\n          card => card.indexInDeck !== cardParam.indexInDeck\r\n        );\r\n        \r\n        break;\r\n      }\r\n      case 2: {\r\n        stateUpdated.graveyard = state.graveyard.slice();\r\n        cardInZone = stateUpdated.graveyard.find(\r\n          card => card.indexInDeck === cardParam.indexInDeck\r\n        );\r\n        stateUpdated.graveyard = stateUpdated.graveyard.filter(\r\n          card => card.indexInDeck !== cardParam.indexInDeck\r\n        );\r\n        \r\n        break;\r\n      }\r\n      case 3: {\r\n        stateUpdated.exile = state.exile.slice();\r\n        cardInZone = stateUpdated.exile.find(\r\n          card => card.indexInDeck === cardParam.indexInDeck\r\n        );\r\n        stateUpdated.exile = stateUpdated.exile.filter(\r\n          card => card.indexInDeck !== cardParam.indexInDeck\r\n        );\r\n        \r\n        break;\r\n      }\r\n      case 4: {\r\n        stateUpdated.library = state.library.slice();\r\n        cardInZone = stateUpdated.library.find(\r\n          card => card.indexInDeck === cardParam.indexInDeck\r\n        );\r\n        stateUpdated.library = stateUpdated.library.filter(\r\n          card => card.indexInDeck !== cardParam.indexInDeck\r\n        );\r\n        \r\n        break;\r\n      }\r\n      default: break;\r\n    }\r\n\r\n    // PASAR LA CARTA A LA OTRA ZONA\r\n    switch(newZone) {\r\n      case 0: {\r\n        stateUpdated.hand = state.hand.slice();\r\n        let newCard = Object.assign({}, cardInZone);\r\n        setFirst ? stateUpdated.hand.unshift(newCard) : stateUpdated.hand.push(newCard);\r\n            \r\n        break;\r\n      }\r\n      case 1: {\r\n        stateUpdated.battlefield = state.battlefield.slice();\r\n        let newCard = Object.assign({}, cardInZone);\r\n        setFirst ? stateUpdated.battlefield.unshift(newCard) : stateUpdated.battlefield.push(newCard);\r\n            \r\n        break;\r\n      }\r\n      case 2: {\r\n        stateUpdated.graveyard = state.graveyard.slice();\r\n        let newCard = Object.assign({}, cardInZone);\r\n        setFirst ? stateUpdated.graveyard.unshift(newCard) : stateUpdated.graveyard.push(newCard);\r\n            \r\n        break;\r\n      }\r\n      case 3: {\r\n        stateUpdated.exile = state.exile.slice();\r\n        let newCard = Object.assign({}, cardInZone);\r\n        setFirst ? stateUpdated.exile.unshift(newCard) : stateUpdated.exile.push(newCard);\r\n            \r\n        break;\r\n      }\r\n      case 4: {\r\n        stateUpdated.library = state.library.slice();\r\n        let newCard = Object.assign({}, cardInZone);\r\n        setFirst ? stateUpdated.library.unshift(newCard) : stateUpdated.library.push(newCard);\r\n            \r\n        break;\r\n      }\r\n      default: break;\r\n    }\r\n\r\n    // ACTUALIZAR EL DECK\r\n    if (shouldSetState) this.setState(stateUpdated);\r\n    return stateUpdated;\r\n  }\r\n\r\n  renderCardsMenu = () => {\r\n    if (this.state.cardsMenu.isOpen) {\r\n      let card = this.state.cardsMenu.card;\r\n      let zone = this.state.cardsMenu.zone;\r\n      return (\r\n        <Modal id=\"cardsMenu\" isOpen={true}>\r\n          <ModalHeader>\r\n            {card.name}\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <ul className=\"list-group\">\r\n              { zone !== 0 ? <li className=\"list-group list-group-item-action\"><button onClick={e => this.onMoveCardZoneMenuClick(card, zone, 0, false, e)}>Hand</button></li> : null }\r\n              { zone !== 1 ? <li className=\"list-group list-group-item-action\"><button onClick={e => this.onMoveCardZoneMenuClick(card, zone, 1, false, e)}>Battlefield</button></li> : null }\r\n              { zone !== 2 ? <li className=\"list-group list-group-item-action\"><button onClick={e => this.onMoveCardZoneMenuClick(card, zone, 2, false, e)}>Graveyard</button></li> : null }\r\n              { zone !== 3 ? <li className=\"list-group list-group-item-action\"><button onClick={e => this.onMoveCardZoneMenuClick(card, zone, 3, false, e)}>Exile</button></li> : null }\r\n              <li className=\"list-group list-group-item-action\"><button onClick={e => this.onMoveCardZoneMenuClick(card, zone, 4, false, e)}>Top</button></li>\r\n              <li className=\"list-group list-group-item-action\"><button onClick={e => this.onMoveCardZoneMenuClick(card, zone, 4, true, e)}>Bottom</button></li>\r\n            </ul>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button onClick={e => this.onCloseCardsMenuClick(e)}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      );\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"deckTester\">\r\n        <ul className=\"buttonsListHorizontal\">\r\n          <li>\r\n            <button onClick={e => this.restart(e)}>Restart</button>\r\n          </li>\r\n          <li>\r\n            <button onClick={e => this.mulligan(e)}>Mulligan</button>\r\n          </li>\r\n          <li>\r\n            <button onClick={e => this.drawCards(this.state, true, 1, e)}>\r\n              Draw\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button onClick={e => this.shuffleLibrary(this.state, true, e)}>\r\n              Shuffle\r\n            </button>\r\n          </li>\r\n          <li>\r\n          </li>\r\n        </ul>\r\n            <CardsListDropdown \r\n              id=\"library\" \r\n              cards={this.state.library}\r\n              onCardClick={this.onCardClickShowMenu}\r\n            />\r\n        { this.renderCardsMenu() }\r\n        <p>Hand ({this.state.hand.length})</p>\r\n        <CardsList\r\n          id=\"hand\"\r\n          cards={this.state.hand}\r\n          onCardClick={this.onCardClickShowMenu}\r\n          view={VIEW_IMAGEONLY}\r\n        />\r\n        <p>Battlefield ({this.state.battlefield.length})</p>\r\n        <CardsList\r\n          id=\"bf\"\r\n          cards={this.state.battlefield}\r\n          onCardClick={this.onCardClickShowMenu}\r\n          view={VIEW_IMAGEONLY}\r\n        />\r\n        <p>Graveyard ({this.state.graveyard.length})</p>\r\n        <CardsList\r\n          id=\"graveyard\"\r\n          cards={this.state.graveyard}\r\n          onCardClick={this.onCardClickShowMenu}\r\n          view={VIEW_IMAGEONLY}\r\n        />\r\n        <p>Exile ({this.state.exile.length})</p>\r\n        <CardsList\r\n          id=\"exile\"\r\n          cards={this.state.exile}\r\n          onCardClick={this.onCardClickShowMenu}\r\n          view={VIEW_IMAGEONLY}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeckTester;\r\n","import React, { Component } from \"react\";\r\nimport SealedDeckImporter from \"../components/SealedDeckImporter\";\r\nimport SealedDeckEditor from \"../components/SealedDeckEditor\";\r\nimport DeckTester from \"../components/DeckTester\";\r\n\r\nclass AppSealed extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      deck: {\r\n        mainboard: [\r\n/*          {\r\n            id: 1,\r\n            count: 1,\r\n            imageUrl: \"/db/cards/WAR/001.jpg\",\r\n            name: \"Karn, the Great Creator\",\r\n            types: [\"Planeswalker\"],\r\n            manaWeight: \"A2\"\r\n          },\r\n          {\r\n            id: 2,\r\n            count: 1,\r\n            imageUrl: \"/db/cards/WAR/002.jpg\",\r\n            name: \"Ugin, the Ineffable\",\r\n            types: [\"Planeswalker\"],\r\n            manaWeight: \"A2\"\r\n          }*/\r\n        ],\r\n        sideboard: [\r\n/*          {\r\n            id: 3,\r\n            count: 1,\r\n            imageUrl: \"/db/cards/WAR/003.jpg\",\r\n            name: \"Ugin's Conjurant\",\r\n            types: [\"Creature\"],\r\n            manaWeight: \"A2\"\r\n          },\r\n          {\r\n            id: 4,\r\n            count: 3,\r\n            imageUrl: \"/db/cards/WAR/004.jpg\",\r\n            name: \"Ajani's Pridemate\",\r\n            types: [\"Creature\"],\r\n            manaWeight: \"A2\"\r\n          }*/\r\n        ]\r\n      }\r\n    };\r\n  }\r\n\r\n  updateDeck = deck => {\r\n    let deckUpdated = Object.assign({}, deck);\r\n    deckUpdated.mainboard = deck.mainboard.slice();\r\n    deckUpdated.sideboard = deck.sideboard.slice();\r\n    //\t  console.log( \"deckUpdated \"+ JSON.stringify(deckUpdated) );\r\n    this.setState({ deck: deckUpdated });\r\n  };\r\n\r\n  onImportedDeck = deck => {\r\n    //\tlet deckCopy = Object.assign({}, this.state.deck);\r\n    //    deckCopy.mainboard = deck.mainboard.slice();\r\n    //    deckCopy.sideboard = deck.sideboard.slice();\r\n    //    this.setState({ deck: deckCopy });\r\n    this.updateDeck(deck);\r\n  };\r\n\r\n  onUpdateDeck = deck => {\r\n    //\tlet deckCopy = Object.assign({}, this.state.deck);\r\n    //    deckCopy.mainboard = deck.mainboard.slice();\r\n    //    deckCopy.sideboard = deck.sideboard.slice();\r\n    //    this.setState({ deck: deckCopy });\r\n    this.updateDeck(deck);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"sealedDeckContainer\">\r\n        <SealedDeckImporter onImportedDeck={this.onImportedDeck} />\r\n        <SealedDeckEditor\r\n          onUpdateDeck={this.onUpdateDeck}\r\n          deck={this.state.deck}\r\n        />\r\n        <DeckTester deck={this.state.deck} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppSealed;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n//import App from \"./app/containers/App\";\r\nimport AppSealed from \"./app/containers/AppSealed\";\r\n//import Counter from \"./components/counter\";\r\n\r\nReactDOM.render(<AppSealed />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}